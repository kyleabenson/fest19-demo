- name: Create AWS VPC {{ ec2_name_prefix }}-vpc
  ec2_vpc_net:
    name: "{{ ec2_name_prefix }}-vpc"
    cidr_block: "{{ec2_subnet}}"
    region: "{{ ec2_region }}"
    tags:
      FestDemo: "true"
      CreatedBy: "Kyle Benson"
  register: create_vpc
  when: ec2_vpc_id is undefined
  until: create_vpc is not failed
  retries: 5

- name: Create EC2 security group for VPC named {{ ec2_name_prefix }}-vpc
  ec2_group:
    name: "{{ ec2_name_prefix }}-insecure_all"
    description: all ports open
    region: "{{ ec2_region }}"
    vpc_id: "{{create_vpc.vpc.id}}"
    tags:
      FestDemo: "true"
      CreatedBy: "Kyle Benson"
    rules:
      - proto: 47
        to_port: -1
        from_port: -1
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 443
        from_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: icmp
        to_port: -1
        from_port: -1
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 80
        from_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 22
        from_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 3389
        from_port: 3389
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 8888
        from_port: 8888
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 8000
        from_port: 8000
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 8080
        from_port: 8080
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 8088
        from_port: 8088
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 8089
        from_port: 8089
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 8443
        from_port: 8443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 830
        from_port: 830
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 179
        from_port: 179
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 5000
        from_port: 5000
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  when: ec2_vpc_id is undefined
  register: create_sg
  until: create_sg is not failed
  retries: 5

- name: Create subnet for {{ ec2_name_prefix }}-vpc
  ec2_vpc_subnet:
    region: "{{ ec2_region }}"
    az: "{{ ec2_az }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    cidr: "{{ ec2_subnet }}"
    wait_timeout: 600
    resource_tags:
      FestDemo: "true"
      CreatedBy: "Kyle Benson"
  register: create_subnet
  when: ec2_vpc_id is undefined
  until: create_subnet is not failed
  retries: 15

- name: vpc internet gateway is present for {{ create_vpc.vpc.id }}
  ec2_vpc_igw:
    region: "{{ ec2_region }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    tags:
      FestDemo: "true"
      CreatedBy: "Kyle Benson"
  register: igw
  until: igw is not failed
  retries: 15
  when: ec2_vpc_id is undefined

- name: vpc public subnet route table is present for {{ create_vpc.vpc.id }}
  ec2_vpc_route_table:
    region: "{{ ec2_region }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    subnets:
      - "{{ create_subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
    tags:
      FestDemo: "true"
      CreatedBy: "Kyle Benson"
  register: routetable
  until: routetable is not failed
  retries: 5
  when: ec2_vpc_id is undefined

- name: set variables for instance creation dynamically since VPC was not supplied by user
  set_fact:
    ec2_vpc_id: "{{ create_vpc.vpc.id }}"
    ec2_security_group: "{{ ec2_name_prefix }}-insecure_all"
    ec2_vpc_subnet_id: "{{ create_subnet.subnet.id }}"
  when: ec2_vpc_id is undefined

- name: Create ssh key pair for workshop {{ ec2_name_prefix }}
  ec2_key:
    name: "{{ ec2_name_prefix }}-key"
    region: "{{ ec2_region }}"
  register: create_key

- name: save private key
  copy:
    content: "{{ create_key.key.private_key }}"
    dest: "{{ playbook_dir }}/{{ec2_name_prefix}}/{{ec2_name_prefix}}-private.pem"
    mode: '0400'
  when: create_key.changed
  
- name: find ami for ansible control node
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_info[control_type].owners }}"
    filters:
      name: "{{ ec2_info[control_type].filter }}"
      architecture: "{{ ec2_info[control_type].architecture }}"
  register: amis

- name: save ami for ansible control node
  set_fact:
    ansible_control_node_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: Create EC2 instances for ansible node (control node)
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[control_type].size }}"
    image: "{{ ansible_control_node_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: 1
    instance_tags:
      Fest_demo: "{{ec2_name_prefix}}-ansible"
      FestDemo: "true"
      CreatedBy: "Kyle Benson"
    count_tag:
      FestDemo: "true"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_info[control_type].disk_space }}"
        delete_on_termination: true
  register: control_output

- name: debugging all variables for ec2 instance creation VPC-1
  debug:
    msg:
      - "ec2_name_prefix: {{ec2_name_prefix}}"
      - "ec2_vpc_id: {{ ec2_vpc_id }}"
      - "{{ ec2_name_prefix }}-key: {{ ec2_name_prefix }}-key"
      - "ec2_security_group: {{ ec2_security_group }}"
      - "ec2_vpc_subnet_id: {{ ec2_vpc_subnet_id }}"

- set_fact:
    express_server: "{{item.public_ip}}" 
  with_items:
    - "{{ control_output.instances | first }}"

- set_stats:
    data:
      express_server: "{{ express_server }}"
  
- name: sleep for 120 seconds and continue with play
  wait_for:
    timeout: 120
  delegate_to: localhost